// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using weatherUploader.Models.Entity;

#nullable disable

namespace weatherUploader.Migrations
{
    [DbContext(typeof(WeatherDbContext))]
    partial class WeatherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("weatherUploader.Models.Entity.WeatherFileInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WeatherFileInfo");
                });

            modelBuilder.Entity("weatherUploader.Models.Entity.WeatherForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("FileInfoId")
                        .HasColumnType("integer");

                    b.Property<double?>("H")
                        .HasColumnType("double precision");

                    b.Property<double>("Humidity")
                        .HasColumnType("double precision");

                    b.Property<double>("Pressure")
                        .HasColumnType("double precision");

                    b.Property<double>("T")
                        .HasColumnType("double precision");

                    b.Property<double>("Td")
                        .HasColumnType("double precision");

                    b.Property<string>("TimeMSC")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("VV")
                        .HasColumnType("double precision");

                    b.Property<string>("WeatherConditions")
                        .HasColumnType("text");

                    b.Property<string>("WindDirection")
                        .HasColumnType("text");

                    b.Property<double?>("WindSpeed")
                        .HasColumnType("double precision");

                    b.Property<double?>("Сloudiness")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("FileInfoId");

                    b.ToTable("WheatherForecast");
                });

            modelBuilder.Entity("weatherUploader.Models.Entity.WeatherForecast", b =>
                {
                    b.HasOne("weatherUploader.Models.Entity.WeatherFileInfo", "FileInfo")
                        .WithMany()
                        .HasForeignKey("FileInfoId");

                    b.Navigation("FileInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
